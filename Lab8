import numpy as np
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox, simpledialog


class MatrixPermutationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Matrix Permutation")

        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_width = min(screen_width - 100, 800)  
        window_height = min(screen_height - 100, 600)  
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.root.geometry(f'{window_width}x{window_height}+{x}+{y}')

        self.label = ttk.Label(root, text="Введите размер подматрицы:")
        self.label.pack()

        self.size_entry = ttk.Entry(root)
        self.size_entry.pack()

        self.generate_button = ttk.Button(root, text="Сгенерировать и вычислить", command=self.generate_and_calculate)
        self.generate_button.pack()

        self.output_text = tk.Text(root, wrap=tk.NONE, height=20, width=80)  # Размеры окна вывода
        self.output_text.pack(fill=tk.BOTH, expand=True)

        self.vertical_scroll = ttk.Scrollbar(self.output_text, command=self.output_text.yview, orient="vertical")
        self.vertical_scroll.pack(side="right", fill="y")

        self.horizontal_scroll = ttk.Scrollbar(self.output_text, command=self.output_text.xview, orient="horizontal")
        self.horizontal_scroll.pack(side="bottom", fill="x")

        self.output_text.config(yscrollcommand=self.vertical_scroll.set, xscrollcommand=self.horizontal_scroll.set)

    def generate_and_calculate(self):
        size_str = self.size_entry.get()

        # Запрашиваем у пользователя систему счисления для ввода
        system_choice = simpledialog.askstring("Система счисления", "Введите систему счисления (16 или 10):")

        if system_choice:
            system_choice = system_choice.strip().lower()
            if system_choice == '16':
                size = int(size_str, 16)
            elif system_choice == '10':
                if not size_str.isdigit():
                    messagebox.showerror("Ошибка", "Введите корректное число.")
                    return
                size = int(size_str)
            else:
                messagebox.showerror("Ошибка", "Введите 10 или 16 в поле системы счисления.")
                return
        else:
            return

        original_matrix = self.generate_random_matrix(size)
        best_matrix, diagonal_prod = self.find_best_matrix(original_matrix)

        self.output_text.delete('1.0', tk.END)

        result_text = "Изначальная матрицa:\n" + self.format_matrix(original_matrix) + "\n\nВарианты перестановок:\n"
        for perm_top in ['AB', 'BA']:
            for perm_bottom in ['CD', 'DC']:
                perm_matrix = np.copy(original_matrix)
                if perm_top == 'AB':
                    perm_matrix[:size, :size] = original_matrix[:size, :size]
                    perm_matrix[:size, size:] = original_matrix[:size, size:]
                else:
                    perm_matrix[:size, :size] = original_matrix[:size, size:]
                    perm_matrix[:size, size:] = original_matrix[:size, :size]

                if perm_bottom == 'CD':
                    perm_matrix[size:, size:] = original_matrix[size:, size:]
                else:
                    perm_matrix[size:, size:] = original_matrix[size:, :size]
                    perm_matrix[size:, :size] = original_matrix[size:, size:]

                result_text += self.format_matrix(perm_matrix) + "\n"

        self.output_text.insert(tk.END, result_text)

        if best_matrix is not None:
            self.show_diagonal_product(diagonal_prod)

    def format_matrix(self, matrix):
        formatted_matrix = ""
        for row in matrix:
            formatted_row = " ".join(map(str, row))
            formatted_matrix += formatted_row + "\n"
        return formatted_matrix

    def generate_random_matrix(self, size):
        matrix = np.random.randint(1, 10, size=(size * 2, size * 2), dtype=int)
        return matrix

    def diagonal_product(self, matrix):
        n = matrix.shape[0]
        product = 1
        for i in range(n):
            product *= matrix[i, i]
        return product

    def find_best_matrix(self, original_matrix):
        n = original_matrix.shape[0]
        max_product = 0
        best_matrix = None

        for perm_top in ['AB', 'BA']:
            for perm_bottom in ['CD', 'DC']:
                perm_matrix = np.copy(original_matrix)
                if perm_top == 'AB':
                    perm_matrix[:n // 2, :n // 2] = original_matrix[:n // 2, :n // 2]
                    perm_matrix[:n // 2, n // 2:] = original_matrix[:n // 2, n // 2:]
                else:
                    perm_matrix[:n // 2, :n // 2] = original_matrix[:n // 2, n // 2:]
                    perm_matrix[:n // 2, n // 2:] = original_matrix[:n // 2, :n // 2]

                if perm_bottom == 'CD':
                    perm_matrix[n // 2:, n // 2:] = original_matrix[n // 2:, n // 2:]
                else:
                    perm_matrix[n // 2:, n // 2:] = original_matrix[n // 2:, :n // 2]
                    perm_matrix[n // 2:, :n // 2] = original_matrix[n // 2:, n // 2:]

                prod = self.diagonal_product(perm_matrix)

                if prod > max_product:
                    max_product = prod
                    best_matrix = perm_matrix

        return best_matrix, max_product

    def show_diagonal_product(self, diagonal_product):
        result = f"Результат произведения на главной диагонали лучшей матрицы: {diagonal_product}"
        messagebox.showinfo("Результат", result)


if __name__ == "__main__":
    root = tk.Tk()
    app = MatrixPermutationApp(root)
    root.mainloop()
